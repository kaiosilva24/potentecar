import { dataManager } from './dataManager';

/**
 * Gerenciador de lucro da produ√ß√£o
 * Respons√°vel por calcular e adicionar o lucro da produ√ß√£o ao baseline do lucro empresarial
 */
export class ProductionProfitManager {
  
  /**
   * Fun√ß√£o para calcular a diferen√ßa entre custo por pneu (receita) e custo dos materiais
   * e adicionar ao baseline do lucro empresarial para manter o lucro inalterado
   */
  static async addProductionProfitToBaseline(
    productName: string, 
    quantityProduced: number, 
    materialsConsumed: Array<{
      material_id: string;
      material_name: string;
      quantity_consumed: number;
      unit: string;
    }>,
    stockItems: Array<{
      item_id: string;
      item_name: string;
      item_type: string;
      unit_cost: number;
      quantity: number;
    }>
  ): Promise<boolean> {
    try {
      console.log('üè≠ [ProductionProfitManager] Calculando diferen√ßa de produ√ß√£o para adicionar ao baseline...');
      console.log('üìä [ProductionProfitManager] Par√¢metros recebidos:', {
        productName,
        quantityProduced,
        materialsCount: materialsConsumed.length,
        stockItemsCount: stockItems.length
      });

      // 1. Obter custo por pneu (receita) do produto
      const costPerTire = await this.getSpecificProductCost(productName);
      console.log(`üí∞ [ProductionProfitManager] Custo por pneu (receita) para "${productName}": R$ ${costPerTire.toFixed(2)}`);

      // 2. Calcular custo total dos materiais consumidos
      let totalMaterialCost = 0;
      
      for (const material of materialsConsumed) {
        const stockItem = stockItems.find(
          item => item.item_id === material.material_id && item.item_type === "material"
        );
        
        if (stockItem) {
          const materialCost = material.quantity_consumed * stockItem.unit_cost;
          totalMaterialCost += materialCost;
          console.log(`üì¶ [ProductionProfitManager] Material "${material.material_name}": ${material.quantity_consumed} x R$ ${stockItem.unit_cost.toFixed(2)} = R$ ${materialCost.toFixed(2)}`);
        } else {
          console.warn(`‚ö†Ô∏è [ProductionProfitManager] Material n√£o encontrado no estoque: ${material.material_name}`);
        }
      }

      // 3. Calcular custo por unidade dos materiais
      const materialCostPerUnit = quantityProduced > 0 ? totalMaterialCost / quantityProduced : 0;
      console.log(`üìä [ProductionProfitManager] Custo total dos materiais: R$ ${totalMaterialCost.toFixed(2)}`);
      console.log(`üìä [ProductionProfitManager] Custo por unidade dos materiais: R$ ${materialCostPerUnit.toFixed(2)}`);

      // 4. Calcular diferen√ßa (lucro por unidade)
      const profitPerUnit = costPerTire - materialCostPerUnit;
      const totalProfit = profitPerUnit * quantityProduced;
      
      console.log(`üí° [ProductionProfitManager] An√°lise da produ√ß√£o:`);
      console.log(`   ‚Ä¢ Custo/Pneu (Receita): R$ ${costPerTire.toFixed(2)}`);
      console.log(`   ‚Ä¢ Materiais por unidade: R$ ${materialCostPerUnit.toFixed(2)}`);
      console.log(`   ‚Ä¢ Diferen√ßa por unidade: R$ ${profitPerUnit.toFixed(2)}`);
      console.log(`   ‚Ä¢ Quantidade produzida: ${quantityProduced}`);
      console.log(`   ‚Ä¢ Lucro total da produ√ß√£o: R$ ${totalProfit.toFixed(2)}`);

      // 5. Se h√° lucro, adicionar ao baseline
      if (totalProfit > 0) {
        const currentBaseline = await dataManager.loadBusinessValueBaseline();
        
        if (currentBaseline !== null) {
          const newBaseline = currentBaseline + totalProfit;
          const success = await dataManager.saveBusinessValueBaseline(newBaseline);
          
          if (success) {
            console.log(`‚úÖ [ProductionProfitManager] Baseline atualizado com sucesso!`);
            console.log(`   ‚Ä¢ Baseline anterior: R$ ${currentBaseline.toFixed(2)}`);
            console.log(`   ‚Ä¢ Lucro adicionado: R$ ${totalProfit.toFixed(2)}`);
            console.log(`   ‚Ä¢ Novo baseline: R$ ${newBaseline.toFixed(2)}`);
            
            // Recalcular lucro empresarial para manter sincroniza√ß√£o
            await dataManager.calculateBusinessProfit();
            
            // Mostrar alerta de sucesso para o usu√°rio
            alert(`üéâ LUCRO DA PRODU√á√ÉO ADICIONADO AO BASELINE!\n\n` +
                  `üìä AN√ÅLISE DA PRODU√á√ÉO:\n` +
                  `‚Ä¢ Produto: ${productName}\n` +
                  `‚Ä¢ Quantidade: ${quantityProduced} unidades\n` +
                  `‚Ä¢ Custo/Pneu (Receita): R$ ${costPerTire.toFixed(2)}\n` +
                  `‚Ä¢ Materiais por unidade: R$ ${materialCostPerUnit.toFixed(2)}\n` +
                  `‚Ä¢ Diferen√ßa por unidade: R$ ${profitPerUnit.toFixed(2)}\n\n` +
                  `üí∞ IMPACTO NO BASELINE:\n` +
                  `‚Ä¢ Lucro total adicionado: R$ ${totalProfit.toFixed(2)}\n` +
                  `‚Ä¢ Baseline anterior: R$ ${currentBaseline.toFixed(2)}\n` +
                  `‚Ä¢ Novo baseline: R$ ${newBaseline.toFixed(2)}\n\n` +
                  `‚úÖ O lucro empresarial permanece inalterado!`);
            
            return true;
          } else {
            console.error('‚ùå [ProductionProfitManager] Falha ao salvar novo baseline');
            return false;
          }
        } else {
          console.warn('‚ö†Ô∏è [ProductionProfitManager] Baseline n√£o definido, n√£o √© poss√≠vel adicionar lucro da produ√ß√£o');
          console.log('üí° [ProductionProfitManager] Confirme o balan√ßo empresarial primeiro para habilitar esta funcionalidade');
          
          alert(`‚ö†Ô∏è BASELINE N√ÉO DEFINIDO\n\n` +
                `Para que o lucro da produ√ß√£o seja automaticamente adicionado ao baseline, ` +
                `voc√™ precisa primeiro confirmar o balan√ßo empresarial.\n\n` +
                `üìã COMO FAZER:\n` +
                `1. V√° em Configura√ß√µes\n` +
                `2. Clique em "Confirmar Balan√ßo Empresarial"\n` +
                `3. Ap√≥s isso, todas as produ√ß√µes ter√£o o lucro automaticamente adicionado ao baseline\n\n` +
                `üí° Isso garante que o lucro empresarial n√£o seja alterado ao gerar produ√ß√£o!`);
          
          return false;
        }
      } else if (totalProfit < 0) {
        console.log(`‚ö†Ô∏è [ProductionProfitManager] Produ√ß√£o com preju√≠zo detectada (R$ ${totalProfit.toFixed(2)})`);
        console.log(`üí° [ProductionProfitManager] N√£o ser√° adicionado ao baseline pois √© preju√≠zo`);
        
        alert(`‚ö†Ô∏è PRODU√á√ÉO COM PREJU√çZO DETECTADA!\n\n` +
              `üìä AN√ÅLISE DA PRODU√á√ÉO:\n` +
              `‚Ä¢ Produto: ${productName}\n` +
              `‚Ä¢ Quantidade: ${quantityProduced} unidades\n` +
              `‚Ä¢ Custo/Pneu (Receita): R$ ${costPerTire.toFixed(2)}\n` +
              `‚Ä¢ Materiais por unidade: R$ ${materialCostPerUnit.toFixed(2)}\n` +
              `‚Ä¢ Preju√≠zo por unidade: R$ ${Math.abs(profitPerUnit).toFixed(2)}\n` +
              `‚Ä¢ Preju√≠zo total: R$ ${Math.abs(totalProfit).toFixed(2)}\n\n` +
              `üí° O baseline n√£o foi alterado pois a produ√ß√£o teve preju√≠zo.\n` +
              `Verifique os custos dos materiais ou o pre√ßo de venda.`);
        
        return true;
      } else {
        console.log(`‚ÑπÔ∏è [ProductionProfitManager] Produ√ß√£o sem lucro nem preju√≠zo (diferen√ßa: R$ ${totalProfit.toFixed(2)})`);
        return true;
      }

    } catch (error) {
      console.error('‚ùå [ProductionProfitManager] Erro ao adicionar lucro da produ√ß√£o ao baseline:', error);
      alert(`‚ùå ERRO ao processar lucro da produ√ß√£o:\n\n${error}\n\nVerifique o console para mais detalhes.`);
      return false;
    }
  }

  /**
   * Fun√ß√£o auxiliar para obter custo espec√≠fico de um produto
   */
  private static async getSpecificProductCost(productName: string): Promise<number> {
    try {
      // PRIORIDADE 1: Buscar dados espec√≠ficos salvos pelo TireCostManager
      const productKey = `tireAnalysis_${productName.toLowerCase().replace(/\s+/g, "_")}`;
      const savedAnalysis = localStorage.getItem(productKey);

      if (savedAnalysis) {
        try {
          const analysis = JSON.parse(savedAnalysis);
          if (analysis.costPerTire && analysis.costPerTire > 0) {
            console.log(`‚úÖ [ProductionProfitManager] Custo espec√≠fico encontrado para "${productName}": R$ ${analysis.costPerTire.toFixed(2)}`);
            return analysis.costPerTire;
          }
        } catch (parseError) {
          console.warn(`‚ö†Ô∏è [ProductionProfitManager] Erro ao parsear an√°lise espec√≠fica para "${productName}":`, parseError);
        }
      }

      // PRIORIDADE 2: Fallback para custo m√©dio
      const averageCost = await dataManager.loadAverageTireCost();
      console.log(`üìä [ProductionProfitManager] Usando custo m√©dio para "${productName}": R$ ${averageCost.toFixed(2)}`);
      return averageCost;

    } catch (error) {
      console.error(`‚ùå [ProductionProfitManager] Erro ao buscar custo espec√≠fico para "${productName}":`, error);
      return 0;
    }
  }

  /**
   * Fun√ß√£o para remover lucro da produ√ß√£o do baseline quando uma produ√ß√£o for exclu√≠da
   */
  static async removeProductionProfitFromBaseline(
    productName: string, 
    quantityProduced: number, 
    materialsConsumed: Array<{
      material_id: string;
      material_name: string;
      quantity_consumed: number;
      unit: string;
    }>,
    stockItems: Array<{
      item_id: string;
      item_name: string;
      item_type: string;
      unit_cost: number;
      quantity: number;
    }>
  ): Promise<boolean> {
    try {
      console.log('üîÑ [ProductionProfitManager] Removendo lucro da produ√ß√£o do baseline...');
      console.log('üìä [ProductionProfitManager] Par√¢metros recebidos para revers√£o:', {
        productName,
        quantityProduced,
        materialsCount: materialsConsumed.length,
        stockItemsCount: stockItems.length
      });

      // 1. Obter custo por pneu (receita) do produto
      const costPerTire = await this.getSpecificProductCost(productName);
      console.log(`üí∞ [ProductionProfitManager] Custo por pneu (receita) para "${productName}": R$ ${costPerTire.toFixed(2)}`);

      // 2. Calcular custo total dos materiais consumidos
      let totalMaterialCost = 0;
      
      for (const material of materialsConsumed) {
        const stockItem = stockItems.find(
          item => item.item_id === material.material_id && item.item_type === "material"
        );
        
        if (stockItem) {
          const materialCost = material.quantity_consumed * stockItem.unit_cost;
          totalMaterialCost += materialCost;
          console.log(`üì¶ [ProductionProfitManager] Material "${material.material_name}": ${material.quantity_consumed} x R$ ${stockItem.unit_cost.toFixed(2)} = R$ ${materialCost.toFixed(2)}`);
        } else {
          console.warn(`‚ö†Ô∏è [ProductionProfitManager] Material n√£o encontrado no estoque: ${material.material_name}`);
        }
      }

      // 3. Calcular custo por unidade dos materiais
      const materialCostPerUnit = quantityProduced > 0 ? totalMaterialCost / quantityProduced : 0;
      console.log(`üìä [ProductionProfitManager] Custo total dos materiais: R$ ${totalMaterialCost.toFixed(2)}`);
      console.log(`üìä [ProductionProfitManager] Custo por unidade dos materiais: R$ ${materialCostPerUnit.toFixed(2)}`);

      // 4. Calcular diferen√ßa (lucro por unidade) que foi adicionada anteriormente
      const profitPerUnit = costPerTire - materialCostPerUnit;
      const totalProfitToRemove = profitPerUnit * quantityProduced;
      
      console.log(`üí° [ProductionProfitManager] An√°lise da produ√ß√£o exclu√≠da:`);
      console.log(`   ‚Ä¢ Custo/Pneu (Receita): R$ ${costPerTire.toFixed(2)}`);
      console.log(`   ‚Ä¢ Materiais por unidade: R$ ${materialCostPerUnit.toFixed(2)}`);
      console.log(`   ‚Ä¢ Diferen√ßa por unidade: R$ ${profitPerUnit.toFixed(2)}`);
      console.log(`   ‚Ä¢ Quantidade produzida: ${quantityProduced}`);
      console.log(`   ‚Ä¢ Lucro total a remover: R$ ${totalProfitToRemove.toFixed(2)}`);

      // 5. Se h√° lucro que foi adicionado anteriormente, remover do baseline
      if (totalProfitToRemove > 0) {
        const currentBaseline = await dataManager.loadBusinessValueBaseline();
        
        if (currentBaseline !== null) {
          const newBaseline = currentBaseline - totalProfitToRemove;
          const success = await dataManager.saveBusinessValueBaseline(newBaseline);
          
          if (success) {
            console.log(`‚úÖ [ProductionProfitManager] Baseline atualizado com sucesso ap√≥s exclus√£o!`);
            console.log(`   ‚Ä¢ Baseline anterior: R$ ${currentBaseline.toFixed(2)}`);
            console.log(`   ‚Ä¢ Lucro removido: R$ ${totalProfitToRemove.toFixed(2)}`);
            console.log(`   ‚Ä¢ Novo baseline: R$ ${newBaseline.toFixed(2)}`);
            
            // Recalcular lucro empresarial para manter sincroniza√ß√£o
            await dataManager.calculateBusinessProfit();
            
            // Mostrar alerta de sucesso para o usu√°rio
            alert(`üîÑ LUCRO DA PRODU√á√ÉO REMOVIDO DO BASELINE!\n\n` +
                  `üìä PRODU√á√ÉO EXCLU√çDA:\n` +
                  `‚Ä¢ Produto: ${productName}\n` +
                  `‚Ä¢ Quantidade: ${quantityProduced} unidades\n` +
                  `‚Ä¢ Custo/Pneu (Receita): R$ ${costPerTire.toFixed(2)}\n` +
                  `‚Ä¢ Materiais por unidade: R$ ${materialCostPerUnit.toFixed(2)}\n` +
                  `‚Ä¢ Diferen√ßa por unidade: R$ ${profitPerUnit.toFixed(2)}\n\n` +
                  `üí∞ IMPACTO NO BASELINE:\n` +
                  `‚Ä¢ Lucro total removido: R$ ${totalProfitToRemove.toFixed(2)}\n` +
                  `‚Ä¢ Baseline anterior: R$ ${currentBaseline.toFixed(2)}\n` +
                  `‚Ä¢ Novo baseline: R$ ${newBaseline.toFixed(2)}\n\n` +
                  `‚úÖ O lucro empresarial foi ajustado corretamente!`);
            
            return true;
          } else {
            console.error('‚ùå [ProductionProfitManager] Falha ao salvar novo baseline ap√≥s exclus√£o');
            return false;
          }
        } else {
          console.warn('‚ö†Ô∏è [ProductionProfitManager] Baseline n√£o definido, n√£o √© poss√≠vel remover lucro da produ√ß√£o');
          return false;
        }
      } else if (totalProfitToRemove < 0) {
        console.log(`‚ö†Ô∏è [ProductionProfitManager] Produ√ß√£o exclu√≠da tinha preju√≠zo (R$ ${totalProfitToRemove.toFixed(2)})`);
        console.log(`üí° [ProductionProfitManager] N√£o h√° lucro para remover do baseline`);
        return true;
      } else {
        console.log(`‚ÑπÔ∏è [ProductionProfitManager] Produ√ß√£o exclu√≠da n√£o tinha lucro nem preju√≠zo`);
        return true;
      }

    } catch (error) {
      console.error('‚ùå [ProductionProfitManager] Erro ao remover lucro da produ√ß√£o do baseline:', error);
      alert(`‚ùå ERRO ao processar remo√ß√£o do lucro da produ√ß√£o:\n\n${error}\n\nVerifique o console para mais detalhes.`);
      return false;
    }
  }

  /**
   * Fun√ß√£o para verificar se o baseline est√° definido
   */
  static async isBaselineDefined(): Promise<boolean> {
    try {
      const baseline = await dataManager.loadBusinessValueBaseline();
      return baseline !== null;
    } catch (error) {
      console.error('‚ùå [ProductionProfitManager] Erro ao verificar baseline:', error);
      return false;
    }
  }

  /**
   * Fun√ß√£o para obter informa√ß√µes do baseline atual
   */
  static async getBaselineInfo(): Promise<{baseline: number | null, businessValue: number, profit: number}> {
    try {
      const baseline = await dataManager.loadBusinessValueBaseline();
      const businessValue = await dataManager.loadBusinessValue();
      const profit = await dataManager.loadBusinessProfit();
      
      return {
        baseline,
        businessValue,
        profit
      };
    } catch (error) {
      console.error('‚ùå [ProductionProfitManager] Erro ao obter informa√ß√µes do baseline:', error);
      return {
        baseline: null,
        businessValue: 0,
        profit: 0
      };
    }
  }
}

export default ProductionProfitManager;
